--- a/net/minecraft/world/item/component/ResolvableProfile.java
+++ b/net/minecraft/world/item/component/ResolvableProfile.java
@@ -46,7 +_,7 @@
     private static ResolvableProfile create(Either<GameProfile, ResolvableProfile.Partial> either, PlayerSkin.Patch patch) {
         return either.map(
             gameProfile -> new ResolvableProfile.Static(Either.left(gameProfile), patch),
-            partial -> (ResolvableProfile)(partial.properties.isEmpty() && partial.id.isPresent() != partial.name.isPresent()
+            partial -> (ResolvableProfile)(partial.properties.isEmpty() && partial.id.isPresent() != partial.name.isPresent() // Paper - diff on change - heuristic for dynamic vs static resolvable profile - used in CraftPlayerProfile#buildResolvable
                 ? partial.name
                     .<ResolvableProfile>map(string -> new ResolvableProfile.Dynamic(Either.left(string), patch))
                     .orElseGet(() -> new ResolvableProfile.Dynamic(Either.right(partial.id.get()), patch))
@@ -95,7 +_,7 @@
         private static final Component DYNAMIC_TOOLTIP = Component.translatable("component.profile.dynamic").withStyle(ChatFormatting.GRAY);
         private final Either<String, UUID> nameOrId;
 
-        Dynamic(Either<String, UUID> either, PlayerSkin.Patch patch) {
+        public Dynamic(Either<String, UUID> either, PlayerSkin.Patch patch) { // Paper - public
             super(ResolvableProfile.createPartialProfile(either.left(), either.right(), PropertyMap.EMPTY), patch);
             this.nameOrId = either;
         }
@@ -135,13 +_,14 @@
 
     public record Partial(Optional<String> name, Optional<UUID> id, PropertyMap properties) {
         public static final ResolvableProfile.Partial EMPTY = new ResolvableProfile.Partial(Optional.empty(), Optional.empty(), PropertyMap.EMPTY);
-        static final MapCodec<ResolvableProfile.Partial> MAP_CODEC = RecordCodecBuilder.mapCodec(
+        public static final MapCodec<ResolvableProfile.Partial> MAP_CODEC = RecordCodecBuilder.mapCodec( // Paper - public
             instance -> instance.group(
                     ExtraCodecs.PLAYER_NAME.optionalFieldOf("name").forGetter(ResolvableProfile.Partial::name),
                     UUIDUtil.CODEC.optionalFieldOf("id").forGetter(ResolvableProfile.Partial::id),
+                    UUIDUtil.STRING_CODEC.lenientOptionalFieldOf("Id").forGetter($ -> Optional.empty()), // Paper
                     ExtraCodecs.PROPERTY_MAP.optionalFieldOf("properties", PropertyMap.EMPTY).forGetter(ResolvableProfile.Partial::properties)
                 )
-                .apply(instance, ResolvableProfile.Partial::new)
+                .apply(instance, (name, uuid, uuid2, propertyMap) -> new ResolvableProfile.Partial(name, uuid2.or(() -> uuid), propertyMap)) // Paper
         );
         public static final StreamCodec<ByteBuf, ResolvableProfile.Partial> STREAM_CODEC = StreamCodec.composite(
             ByteBufCodecs.PLAYER_NAME.apply(ByteBufCodecs::optional),
@@ -162,7 +_,7 @@
         public static final ResolvableProfile.Static EMPTY = new ResolvableProfile.Static(Either.right(ResolvableProfile.Partial.EMPTY), PlayerSkin.Patch.EMPTY);
         private final Either<GameProfile, ResolvableProfile.Partial> contents;
 
-        Static(Either<GameProfile, ResolvableProfile.Partial> either, PlayerSkin.Patch patch) {
+        public Static(Either<GameProfile, ResolvableProfile.Partial> either, PlayerSkin.Patch patch) { // Paper - public
             super(either.map(gameProfile -> (GameProfile)gameProfile, ResolvableProfile.Partial::createProfile), patch);
             this.contents = either;
         }
