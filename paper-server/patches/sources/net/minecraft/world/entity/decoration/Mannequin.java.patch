--- a/net/minecraft/world/entity/decoration/Mannequin.java
+++ b/net/minecraft/world/entity/decoration/Mannequin.java
@@ -32,7 +_,7 @@
     private static final EntityDataAccessor<Optional<Component>> DATA_DESCRIPTION = SynchedEntityData.defineId(
         Mannequin.class, EntityDataSerializers.OPTIONAL_COMPONENT
     );
-    private static final byte ALL_LAYERS = (byte)Arrays.stream(PlayerModelPart.values()).mapToInt(PlayerModelPart::getMask).reduce(0, (i, i1) -> i | i1);
+    public static final byte ALL_LAYERS = (byte)Arrays.stream(PlayerModelPart.values()).mapToInt(PlayerModelPart::getMask).reduce(0, (i, i1) -> i | i1); // Paper - public
     private static final Set<Pose> VALID_POSES = Set.of(Pose.STANDING, Pose.CROUCHING, Pose.SWIMMING, Pose.FALL_FLYING, Pose.SLEEPING);
     public static final Codec<Pose> POSE_CODEC = Pose.CODEC
         .validate(pose -> VALID_POSES.contains(pose) ? DataResult.success(pose) : DataResult.error(() -> "Invalid pose: " + pose.getSerializedName()));
@@ -43,7 +_,7 @@
             _byte -> Arrays.stream(PlayerModelPart.values()).filter(playerModelPart -> (_byte & playerModelPart.getMask()) == 0).toList()
         );
     public static final ResolvableProfile DEFAULT_PROFILE = ResolvableProfile.Static.EMPTY;
-    private static final Component DEFAULT_DESCRIPTION = Component.translatable("entity.minecraft.mannequin.label");
+    public static final Component DEFAULT_DESCRIPTION = Component.translatable("entity.minecraft.mannequin.label"); // Paper - public
     protected static EntityType.EntityFactory<Mannequin> constructor = Mannequin::new;
     private static final String PROFILE_FIELD = "profile";
     private static final String HIDDEN_LAYERS_FIELD = "hidden_layers";
@@ -77,33 +_,33 @@
         builder.define(DATA_DESCRIPTION, Optional.of(DEFAULT_DESCRIPTION));
     }
 
-    protected ResolvableProfile getProfile() {
+    public ResolvableProfile getProfile() { // Paper - public
         return this.entityData.get(DATA_PROFILE);
     }
 
-    private void setProfile(ResolvableProfile resolvableProfile) {
+    public void setProfile(ResolvableProfile resolvableProfile) { // Paper - public
         this.entityData.set(DATA_PROFILE, resolvableProfile);
     }
 
-    private boolean getImmovable() {
+    public boolean getImmovable() { // Paper - public
         return this.entityData.get(DATA_IMMOVABLE);
     }
 
-    private void setImmovable(boolean flag) {
+    public void setImmovable(boolean flag) { // Paper - public
         this.entityData.set(DATA_IMMOVABLE, flag);
     }
 
     @Nullable
-    protected Component getDescription() {
+    public Component getDescription() { // Paper - public
         return this.entityData.get(DATA_DESCRIPTION).orElse(null);
     }
 
-    private void setDescription(Component component) {
+    public void setDescription(Component component) { // Paper - public
         this.description = component;
         this.updateDescription();
     }
 
-    private void setHideDescription(boolean flag) {
+    public void setHideDescription(boolean flag) { // Paper - public
         this.hideDescription = flag;
         this.updateDescription();
     }
